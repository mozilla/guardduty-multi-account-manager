AWSTemplateFormatVersion: 2010-09-09
Description: Mozilla Multi Account Manager formerly known as guardDuty2MozDef subscribes to gd cloudwatch events and outputs MozDef format message in an SQS queue.
Metadata:
  Source: https://github.com/mozilla/guardduty-multi-account-manager/tree/master/cloudformation
Parameters:
  LambdaCodeS3BucketNamePrefix:
    Type: String
    Default: public.
    Description: >
      A prefix string describing the S3 bucket name in each region containing
      the normalization.zip and plumbing.zip Lambda code. This parameter is appended with
      the region name. For example my-bucket- would be turned into
      my-bucket-us-west-2 for us-west-2. Set this to blank if your bucket name
      has no prefix.
  LambdaCodeS3BucketNameSuffix:
    Type: String
    Default: .infosec.mozilla.org
    Description: >
      A suffix string describing the S3 bucket name in each region containing
      the normalization.zip and plumbing.zip Lambda code. This parameter is prepended with
      the region name. For example -my-bucket would be turned into
      us-west-2-my-bucket for us-west-2. Set this to blank if your bucket name
      has no suffix
  LambdaCodeS3Path:
    Type: String
    Default: guardduty-multi-account-manager/lambda/
    Description: >
      The path in the S3 bucket containing the Lambda code.
    AllowedPattern: '.*\/$'
    ConstraintDescription: A path ending in the / character
Resources:
  GuardDutyToMozDefRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /service-role/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        -
          PolicyName: "allow-sns-topic-publishing"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "sns:Publish"
                Resource: !Ref SnsOutputTopic
  GuardDutyPlumbingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /service-role/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/CloudWatchEventsFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
  SqsOutput:
    Type: "AWS::SQS::Queue"
  SnsOutputTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint:
            Fn::GetAtt:
              - "SqsOutput"
              - "Arn"
          Protocol: "sqs"
  SqsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Id: MyQueuePolicy
        Statement:
          - Sid: Allow-SendMessage-To-The-Queue-From-SNS-Topic
            Effect: Allow
            Principal: '*'
            Action:
              - sqs:SendMessage
            Resource: '*'
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SnsOutputTopic
      Queues:
        - !Ref SqsOutput
  LambdaInvokePermission1:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      FunctionName: !GetAtt 'findingsToMozDef.Arn'
  LambdaInvokePermission2:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      FunctionName: !GetAtt 'findingsToMozDef.Arn'
  findingsToMozDef:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: 'python3.6'
      Timeout: 300
      Handler: lambda_functions/normalization.handle
      Role: !GetAtt 'GuardDutyToMozDefRole.Arn'
      Code:
        S3Bucket: !Join [ '', [ !Ref LambdaCodeS3BucketNamePrefix, !Ref 'AWS::Region', !Ref LambdaCodeS3BucketNameSuffix ] ]
        S3Key: !Join [ '', [ !Ref LambdaCodeS3Path, "normalization.zip" ] ]
      Environment:
        Variables:
          minSeverityLevel: 'LOW'
          SNS_OUTPUT_TOPIC_ARN: !Ref SnsOutputTopic
  gdPlumbing:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: 'python3.6'
      Timeout: 300
      Handler: lambda_functions/plumbing.handle
      Role: !GetAtt 'GuardDutyPlumbingRole.Arn'
      Code:
        S3Bucket: !Join [ '', [ !Ref LambdaCodeS3BucketNamePrefix, !Ref 'AWS::Region', !Ref LambdaCodeS3BucketNameSuffix ] ]
        S3Key: !Join [ '', [ !Ref LambdaCodeS3Path, "plumbing.zip" ] ]
      Environment:
        Variables:
          NORMALIZER_LAMBDA_FUNCTION: !GetAtt findingsToMozDef.Arn
  PlumbingScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger GuardDuty plumbing once per hour"
      ScheduleExpression: "rate(1 hour)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "gdPlumbing"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: gdPlumbing
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - PlumbingScheduledRule
          - Arn
Outputs:
  NormalizationLambdaFunction:
    Description: The arn of the normalizer lambda.
    Value: !GetAtt findingsToMozDef.Arn
  OutputQueue:
    Description: Where do the normalized events end up.  (SQS arn)
    Value: !Ref SqsOutput
